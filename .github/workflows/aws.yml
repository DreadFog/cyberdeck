name: Manage AMI and AWS Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: 'Choose action: Deploy or Destroy'
        required: true
        options:
          - deploy
          - destroy

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'deploy' }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set short git commit SHA
        id: vars
        run: |
            calculatedSha=$(git rev-parse --short ${{ github.sha }})
            echo "COMMIT_SHORT_SHA=$calculatedSha" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      
      - name: Install Ansible and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible
          ansible-galaxy install -r ./ansible/requirements.yml

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Run Ansible Playbook to Build AMI
        env:
          PROJECT_NAME: ${{ env.GITHUB_REPOSITORY }}
          BRANCH_NAME: ${{ github.ref_name }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          cd ansible
          ansible-playbook site.yml

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.0.0"

      - name: Initialize Terraform
        run: |
          cd terraform
          terraform init

      - name: Apply Terraform
        env:
            TF_VAR_aws_region: ${{ vars.AWS_REGION }}
            TF_VAR_instance_count: ${{ vars.INSTANCE_COUNT }}
        run: |
          cd terraform
          terraform apply -auto-approve

  destroy:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'destroy' }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set short git commit SHA
        id: vars
        run: |
            calculatedSha=$(git rev-parse --short ${{ github.sha }})
            echo "COMMIT_SHORT_SHA=$calculatedSha" >> $GITHUB_ENV

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.0.0"

      - name: Initialize Terraform
        run: |
          cd terraform
          terraform init

      - name: Destroy Terraform Managed Infrastructure
        run: |
          cd terraform
          terraform destroy -auto-approve

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Destroy AMIs based on project and branch tags
        env:
          PROJECT_NAME: ${{ env.GITHUB_REPOSITORY }}
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          AMIS=$(aws ec2 describe-images --filters "Name=tag:Project,Values=${PROJECT_NAME}" "Name=tag:GitBranch,Values=${BRANCH_NAME}" --query 'Images[*].[ImageId]' --output text)
          for ami in $AMIS; do
            aws ec2 deregister-image --image-id $ami
            SNAPSHOTS=$(aws ec2 describe-snapshots --filters "Name=owner-id,Values=$(aws sts get-caller-identity --query Account --output text)" "Name=tag:AMI_ID,Values=$ami" --query 'Snapshots[*].SnapshotId' --output text)
            for snapshot in $SNAPSHOTS; do
              aws ec2 delete-snapshot --snapshot-id $snapshot
            done
          done
